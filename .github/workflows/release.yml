name: RCC_prog Release Pipeline

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  export-kicad:
    env:
      BaseFileName: "RCC_prog"
      SchematicFileExtension: "kicad_sch"
      PCBFileExtension: "kicad_pcb"
      OutputFolder: "./output"
      ConfigFilePath: ".kibot/release.kibot.yaml"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v4
    
    - name: Prepare output directory
      run: |
        mkdir -p ${{ env.OutputFolder }}
        cp -r ./pcb ${{ env.OutputFolder }}/kicad
        cp ./LICENSE.md ${{ env.OutputFolder }}

    - name: Run KiBOT
      uses: INTI-CMNB/KiBot@v2_dk7
      with:
        config: ${{ env.ConfigFilePath }}
        dir: ${{ env.OutputFolder }}
        schema: "./pcb/${{ env.BaseFileName }}.${{ env.SchematicFileExtension }}"
        board: "./pcb/${{ env.BaseFileName }}.${{ env.PCBFileExtension }}"

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kicad-export
        path: ${{ env.OutputFolder }}
        retention-days: 1

  export-freecad:
    env:
      FREECADVERSION: "1.0.2"
      FreeCADFileName: "./mechanical/housing.FCStd"
      OutputFolder: "./output"
      PartType: "PartDesign::Body"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v4
    
    - name: Prepare output directory
      run: |
        mkdir -p ${{ env.OutputFolder }}
        cp -r ./mechanical ${{ env.OutputFolder }}
        cp ./LICENSE.md ${{ env.OutputFolder }}

    - name: Install FreeCAD
      run: |
          wget https://github.com/FreeCAD/FreeCAD/releases/download/${{ env.FREECADVERSION }}/FreeCAD_${{ env.FREECADVERSION }}-conda-Linux-x86_64-py311.AppImage
          chmod 0777 FreeCAD_${{ env.FREECADVERSION }}-conda-Linux-x86_64-py311.AppImage
          ./FreeCAD_${{ env.FREECADVERSION }}-conda-Linux-x86_64-py311.AppImage --appimage-extract
    - name: Get FreeCAD Export
      run: |
          git clone https://github.com/0x007E/pyfreecadexport.git
    - name: Export STEP Files
      run: |
          ./squashfs-root/usr/bin/python ./pyfreecadexport/src/pyfreecadexport.py -f "${{ env.FreeCADFileName }}" -p "${{ env.PartType }}" -d "${{ env.OutputFolder }}" -e "step" -l "squashfs-root/usr/lib/"
          ./squashfs-root/usr/bin/python ./pyfreecadexport/src/pyfreecadexport.py -f "${{ env.FreeCADFileName }}" -p "${{ env.PartType }}" -d "${{ env.OutputFolder }}" -e "stl" -l "squashfs-root/usr/lib/"
    
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: freecad-export
        path: ${{ env.OutputFolder }}
        retention-days: 1
  
  build-software:
    env:
      SOLUTION_FILE: ".\\RaGae.Projects.RCC.sln"
      PROJECT_PATH: ".\\Programmer"
      PROJECT_FILE: "Programmer.csproj"
      RUNTIME_IDENTIFIER: "win-x64"
      READY_TO_RUN: true
      DOTNET_VERSION: "8.0.415"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ env.DOTNET_VERSION }}"
      - uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64
      - name: Restore packages
        run: dotnet restore ${{ env.SOLUTION_FILE }} --runtime ${{ env.RUNTIME_IDENTIFIER }} -p:PublishReadyToRun=${{ env.READY_TO_RUN }}
      - name: Decode and save PFX certificate
        shell: pwsh
        run: |
          $pfxBase64 = '${{ secrets.PFX_CLICKONCE_CERTIFICATE_BASE64 }}'
          $bytes = [Convert]::FromBase64String($pfxBase64)
          [IO.File]::WriteAllBytes("./clickonce.pfx", $bytes)
      - name: Import PFX certificate to Cert Store
        shell: pwsh
        run: |
          $password = ConvertTo-SecureString -String '${{ secrets.PFX_CLICKONCE_EXPORT_PASSWORD }}' -AsPlainText -Force
          Import-PfxCertificate -FilePath ./clickonce.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $password
          Get-ChildItem Cert:\CurrentUser\My | select Subject,Thumbprint,HasPrivateKey,Provider
      - name: Publish ClickOnce
        run: |
          msbuild ${{ env.PROJECT_PATH }}\${{ env.PROJECT_FILE }} /t:publish /p:Configuration=Release /p:PublishProfile=ClickOnceProfile /p:PublishDir=.\publish /p:RuntimeIdentifier=${{ env.RUNTIME_IDENTIFIER }} /p:PublishReadyToRun=${{ env.READY_TO_RUN }}
      - name: Create ClickOnce OutputFolder
        run: |
          mkdir .\data\clickonce
          cp -r ${{ env.PROJECT_PATH }}\publish\* .\data\clickonce\

      - name: Upload ClickOnce Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-clickonce
          path: .\data
      
      - name: Upload files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: .\data

  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-software
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-release:
    needs: [export-kicad, export-freecad, build-software]
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
            Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download KiCad Artifacts
      uses: actions/download-artifact@v4
      with:
        name: kicad-export
        path: ./artifact/kicad
    - name: Display structure
      run: ls -R ./artifact/kicad
    - name: Create Compressed File
      run: |
        cd ./artifact
        tar -czvf ./kicad.tar.gz ./kicad
        zip -r ./kicad.zip ./kicad
        cd ..

    - name: Upload KiCAD Schematic
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/kicad/schematic/RCC_prog-schematic.pdf
        asset_name: schematic.pdf
        asset_content_type: application/pdf

    - name: Upload KiCAD PCB
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/kicad/pcb/PCB.pdf
        asset_name: pcb.pdf
        asset_content_type: application/pdf

    - name: Upload KiCAD TOP Render
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/kicad/blender/top.png
        asset_name: top.kicad.png
        asset_content_type: image/png

    - name: Upload KiCAD BOTTOM Render
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/kicad/blender/bottom.png
        asset_name: bottom.kicad.png
        asset_content_type: image/png

    - name: Upload KiCAD Drill PDF
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/kicad/drill/RCC_prog-drill_map.pdf
        asset_name: drill.pdf
        asset_content_type: application/pdf

    - name: Upload KiCAD Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/kicad.tar.gz
        asset_name: kicad.tar.gz
        asset_content_type: application/gzip

    - name: Upload KiCAD Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/kicad.zip
        asset_name: kicad.zip
        asset_content_type: application/zip

    - name: Download FreeCAD Artifacts
      uses: actions/download-artifact@v4
      with:
        name: freecad-export
        path: ./artifact/freecad
    - name: Display structure
      run: ls -R ./artifact/freecad
    - name: Create Compressed File
      run: |
        cp -r ./artifact/kicad/step ./artifact/freecad/pcb
        cd ./artifact
        tar -czvf ./freecad.tar.gz ./freecad
        zip -r ./freecad.zip ./freecad
        cd ..

    - name: Upload FreeCAD Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/freecad.tar.gz
        asset_name: freecad.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload FreeCAD Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/freecad.zip
        asset_name: freecad.zip
        asset_content_type: application/zip
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-clickonce
        path: ./artifact/build
    - name: Display structure
      run: ls -R ./artifact/build
    - name: Create Compressed File
      run: |
        cd ./artifact
        tar -czvf ./build.tar.gz ./build
        zip -r ./build.zip ./build
        cd ..

    - name: Upload Build Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/build.tar.gz
        asset_name: programmer.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Build Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifact/build.zip
        asset_name: programmer.zip
        asset_content_type: application/zip

