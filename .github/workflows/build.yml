name: RCC_prog Build Pipeline

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  export-kicad:
    env:
      BaseFileName: "RCC_prog"
      SchematicFileExtension: "kicad_sch"
      PCBFileExtension: "kicad_pcb"
      OutputFolder: "./output"
      ConfigFilePath: ".kibot/build.kibot.yaml"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v4
    
    - name: Prepare output directory
      run: |
        mkdir -p ${{ env.OutputFolder }}
        cp -r ./pcb ${{ env.OutputFolder }}/kicad
        cp ./LICENSE.md ${{ env.OutputFolder }}

    - name: Run KiBOT
      uses: INTI-CMNB/KiBot@v2_dk7
      with:
        config: ${{ env.ConfigFilePath }}
        dir: ${{ env.OutputFolder }}
        schema: "./pcb/${{ env.BaseFileName }}.${{ env.SchematicFileExtension }}"
        board: "./pcb/${{ env.BaseFileName }}.${{ env.PCBFileExtension }}"

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kicad-export
        path: ${{ env.OutputFolder }}
        retention-days: 1

  export-freecad:
    env:
      FREECADVERSION: "1.0.2"
      FreeCADFileName: "./mechanical/housing.FCStd"
      OutputFolder: "./output"
      PartType: "PartDesign::Body"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v4
    
    - name: Prepare output directory
      run: |
        mkdir -p ${{ env.OutputFolder }}
        cp -r ./mechanical ${{ env.OutputFolder }}
        cp ./LICENSE.md ${{ env.OutputFolder }}

    - name: Install FreeCAD
      run: |
          wget https://github.com/FreeCAD/FreeCAD/releases/download/${{ env.FREECADVERSION }}/FreeCAD_${{ env.FREECADVERSION }}-conda-Linux-x86_64-py311.AppImage
          chmod 0777 FreeCAD_${{ env.FREECADVERSION }}-conda-Linux-x86_64-py311.AppImage
          ./FreeCAD_${{ env.FREECADVERSION }}-conda-Linux-x86_64-py311.AppImage --appimage-extract
    - name: Get FreeCAD Export
      run: |
          git clone https://github.com/0x007E/pyfreecadexport.git
    - name: Export STEP Files
      run: |
          ./squashfs-root/usr/bin/python ./pyfreecadexport/src/pyfreecadexport.py -f "${{ env.FreeCADFileName }}" -p "${{ env.PartType }}" -d "${{ env.OutputFolder }}" -e "step" -l "squashfs-root/usr/lib/"
          ./squashfs-root/usr/bin/python ./pyfreecadexport/src/pyfreecadexport.py -f "${{ env.FreeCADFileName }}" -p "${{ env.PartType }}" -d "${{ env.OutputFolder }}" -e "stl" -l "squashfs-root/usr/lib/"
    
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: freecad-export
        path: ${{ env.OutputFolder }}
        retention-days: 1

  build-programmer:
    env:
      SOLUTION: ".\\RaGae.Projects.RCC.sln"
      PROJECT_PATH: ".\\Programmer\\Programmer.csproj"
      CERTIFICATE_PATH: ".\\Programmer\\clickonce.pfx"
      PUBLISH_PATH: ".\\publish"
      DOTNET_VERSION: "8.0.21"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ env.DOTNET_VERSION }}"
      - uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64
      - name: Restore packages
        run: nuget restore ${{ env.SOLUTION_PATH }}
      - name: Decode and save PFX certificate
        shell: pwsh
        run: |
          $pfxBase64 = '${{ secrets.PFX_CLICKONCE_CERTIFICATE_BASE64 }}'
          $bytes = [Convert]::FromBase64String($pfxBase64)
          [IO.File]::WriteAllBytes("${{ env.CERTIFICATE_PATH }}", $bytes)
      - name: Import PFX certificate to Cert Store
        shell: pwsh
        run: |
          $password = ConvertTo-SecureString -String '${{ secrets.PFX_CLICKONCE_EXPORT_PASSWORD }}' -AsPlainText -Force
          Import-PfxCertificate -FilePath ${{ env.CERTIFICATE_PATH }} -CertStoreLocation Cert:\CurrentUser\My -Password $password
      - name: Publish ClickOnce
        run: msbuild ${{ env.PROJECT_PATH }} /t:publish /p:PublishProfile=ClickOnceProfile /p:PublishDir=${{ env.PUBLISH_PATH }}

      - name: Upload ClickOnce Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-clickonce
          path: ${{ env.PUBLISH_PATH }}
